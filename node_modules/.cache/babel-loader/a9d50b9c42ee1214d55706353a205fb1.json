{"ast":null,"code":"var _jsxFileName = \"/home/pot/project/web-service/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactFlow, { isEdge, removeElements, addEdge, MiniMap, Controls } from 'react-flow-renderer';\nimport ColorSelectorNode from './ColorSelectorNode';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst onNodeDragStop = (event, node) => console.log('drag stop', node);\n\nconst onElementClick = (event, element) => console.log('click', element);\n\nconst initBgColor = '#1A192B';\nconst connectionLineStyle = {\n  stroke: '#fff'\n};\nconst snapGrid = [20, 20];\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode\n};\n\nconst CustomNodeFlow = () => {\n  _s();\n\n  const [reactflowInstance, setReactflowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const [bgColor, setBgColor] = useState(initBgColor);\n  useEffect(() => {\n    const onChange = event => {\n      setElements(els => els.map(e => {\n        if (isEdge(e) || e.id !== '2') {\n          return e;\n        }\n\n        const color = event.target.value;\n        setBgColor(color);\n        return { ...e,\n          data: { ...e.data,\n            color\n          }\n        };\n      }));\n    };\n\n    setElements([{\n      id: '1',\n      type: 'input',\n      data: {\n        label: 'An input node'\n      },\n      position: {\n        x: 0,\n        y: 50\n      },\n      sourcePosition: 'right'\n    }, {\n      id: '2',\n      type: 'selectorNode',\n      data: {\n        onChange: onChange,\n        color: initBgColor\n      },\n      style: {\n        border: '1px solid #777',\n        padding: 10\n      },\n      position: {\n        x: 300,\n        y: 50\n      }\n    }, {\n      id: '3',\n      type: 'output',\n      data: {\n        label: 'Output A'\n      },\n      position: {\n        x: 650,\n        y: 25\n      },\n      targetPosition: 'left'\n    }, {\n      id: '4',\n      type: 'output',\n      data: {\n        label: 'Output B'\n      },\n      position: {\n        x: 650,\n        y: 100\n      },\n      targetPosition: 'left'\n    }, {\n      id: 'e1-2',\n      source: '1',\n      target: '2',\n      animated: true,\n      style: {\n        stroke: '#fff'\n      }\n    }, {\n      id: 'e2a-3',\n      source: '2',\n      target: '3',\n      sourceHandle: 'a',\n      animated: true,\n      style: {\n        stroke: '#fff'\n      }\n    }, {\n      id: 'e2b-4',\n      source: '2',\n      target: '4',\n      sourceHandle: 'b',\n      animated: true,\n      style: {\n        stroke: '#fff'\n      }\n    }]);\n  }, []);\n  useEffect(() => {\n    if (reactflowInstance && elements.length > 0) {\n      reactflowInstance.fitView();\n    }\n  }, [reactflowInstance, elements.length]);\n  const onElementsRemove = useCallback(elementsToRemove => setElements(els => removeElements(elementsToRemove, els)), []);\n  const onConnect = useCallback(params => setElements(els => addEdge({ ...params,\n    animated: true,\n    style: {\n      stroke: '#fff'\n    }\n  }, els)), []);\n  const onLoad = useCallback(rfi => {\n    if (!reactflowInstance) {\n      setReactflowInstance(rfi);\n      console.log('flow loaded:', rfi);\n    }\n  }, [reactflowInstance]);\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements,\n    onElementClick: onElementClick,\n    onElementsRemove: onElementsRemove,\n    onConnect: onConnect,\n    onNodeDragStop: onNodeDragStop,\n    style: {\n      background: bgColor\n    },\n    onLoad: onLoad,\n    nodeTypes: nodeTypes,\n    connectionLineStyle: connectionLineStyle,\n    snapToGrid: true,\n    snapGrid: snapGrid,\n    defaultZoom: 1.5,\n    children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n      nodeStrokeColor: n => {\n        if (n.type === 'input') return '#0041d0';\n        if (n.type === 'selectorNode') return bgColor;\n        if (n.type === 'output') return '#ff0072';\n      },\n      nodeColor: n => {\n        if (n.type === 'selectorNode') return bgColor;\n        return '#fff';\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomNodeFlow, \"Ol7jC2ge7DFMHVdj0ceVJ9jl5UI=\");\n\n_c = CustomNodeFlow;\nexport default CustomNodeFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomNodeFlow\");","map":{"version":3,"sources":["/home/pot/project/web-service/src/index.js"],"names":["React","useState","useEffect","useCallback","ReactFlow","isEdge","removeElements","addEdge","MiniMap","Controls","ColorSelectorNode","onNodeDragStop","event","node","console","log","onElementClick","element","initBgColor","connectionLineStyle","stroke","snapGrid","nodeTypes","selectorNode","CustomNodeFlow","reactflowInstance","setReactflowInstance","elements","setElements","bgColor","setBgColor","onChange","els","map","e","id","color","target","value","data","type","label","position","x","y","sourcePosition","style","border","padding","targetPosition","source","animated","sourceHandle","length","fitView","onElementsRemove","elementsToRemove","onConnect","params","onLoad","rfi","background","n"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport ReactFlow, {\n  isEdge,\n  removeElements,\n  addEdge,\n  MiniMap,\n  Controls,\n} from 'react-flow-renderer';\n\nimport ColorSelectorNode from './ColorSelectorNode';\n\nimport './index.css';\n\nconst onNodeDragStop = (event, node) => console.log('drag stop', node);\nconst onElementClick = (event, element) => console.log('click', element);\n\nconst initBgColor = '#1A192B';\n\nconst connectionLineStyle = { stroke: '#fff' };\nconst snapGrid = [20, 20];\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode,\n};\n\nconst CustomNodeFlow = () => {\n  const [reactflowInstance, setReactflowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const [bgColor, setBgColor] = useState(initBgColor);\n\n  useEffect(() => {\n    const onChange = (event) => {\n      setElements((els) =>\n        els.map((e) => {\n          if (isEdge(e) || e.id !== '2') {\n            return e;\n          }\n\n          const color = event.target.value;\n\n          setBgColor(color);\n\n          return {\n            ...e,\n            data: {\n              ...e.data,\n              color,\n            },\n          };\n        })\n      );\n    };\n\n    setElements([\n      {\n        id: '1',\n        type: 'input',\n        data: { label: 'An input node' },\n        position: { x: 0, y: 50 },\n        sourcePosition: 'right',\n      },\n      {\n        id: '2',\n        type: 'selectorNode',\n        data: { onChange: onChange, color: initBgColor },\n        style: { border: '1px solid #777', padding: 10 },\n        position: { x: 300, y: 50 },\n      },\n      {\n        id: '3',\n        type: 'output',\n        data: { label: 'Output A' },\n        position: { x: 650, y: 25 },\n        targetPosition: 'left',\n      },\n      {\n        id: '4',\n        type: 'output',\n        data: { label: 'Output B' },\n        position: { x: 650, y: 100 },\n        targetPosition: 'left',\n      },\n\n      {\n        id: 'e1-2',\n        source: '1',\n        target: '2',\n        animated: true,\n        style: { stroke: '#fff' },\n      },\n      {\n        id: 'e2a-3',\n        source: '2',\n        target: '3',\n        sourceHandle: 'a',\n        animated: true,\n        style: { stroke: '#fff' },\n      },\n      {\n        id: 'e2b-4',\n        source: '2',\n        target: '4',\n        sourceHandle: 'b',\n        animated: true,\n        style: { stroke: '#fff' },\n      },\n    ]);\n  }, []);\n\n  useEffect(() => {\n    if (reactflowInstance && elements.length > 0) {\n      reactflowInstance.fitView();\n    }\n  }, [reactflowInstance, elements.length]);\n\n  const onElementsRemove = useCallback(\n    (elementsToRemove) =>\n      setElements((els) => removeElements(elementsToRemove, els)),\n    []\n  );\n  const onConnect = useCallback(\n    (params) =>\n      setElements((els) =>\n        addEdge({ ...params, animated: true, style: { stroke: '#fff' } }, els)\n      ),\n    []\n  );\n\n  const onLoad = useCallback(\n    (rfi) => {\n      if (!reactflowInstance) {\n        setReactflowInstance(rfi);\n        console.log('flow loaded:', rfi);\n      }\n    },\n    [reactflowInstance]\n  );\n\n  return (\n    <ReactFlow\n      elements={elements}\n      onElementClick={onElementClick}\n      onElementsRemove={onElementsRemove}\n      onConnect={onConnect}\n      onNodeDragStop={onNodeDragStop}\n      style={{ background: bgColor }}\n      onLoad={onLoad}\n      nodeTypes={nodeTypes}\n      connectionLineStyle={connectionLineStyle}\n      snapToGrid={true}\n      snapGrid={snapGrid}\n      defaultZoom={1.5}\n    >\n      <MiniMap\n        nodeStrokeColor={(n) => {\n          if (n.type === 'input') return '#0041d0';\n          if (n.type === 'selectorNode') return bgColor;\n          if (n.type === 'output') return '#ff0072';\n        }}\n        nodeColor={(n) => {\n          if (n.type === 'selectorNode') return bgColor;\n          return '#fff';\n        }}\n      />\n      <Controls />\n    </ReactFlow>\n  );\n};\n\nexport default CustomNodeFlow;"]},"metadata":{},"sourceType":"module"}